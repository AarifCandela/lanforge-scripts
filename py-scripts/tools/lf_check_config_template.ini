#
# NAME : config.ini
#
# PURPOSE : Configuration (lf_check_config.ini) information for running lf_check.py 
# 
# SETUP: copy lf_check_config_template.ini to lf_check_config.ini and update lf_check_config.ini
#
# 

# NOTE: each test dictionary key must be unique 

# NOTE: { }  placement important, will cause parcing errors
# radio configuraiton used below for test arguments
# NOTE: KEY must match ELEMENT of the DICTIONARY (RADIO_1_CFG == "KEY":"RADIO_1_CFG")
[RADIO_DICTIONARY]
RADIO_DICT: {
    "RADIO_0_CFG":{"KEY":"RADIO_0_CFG","RADIO":"wiphy0","STATIONS":"4","SSID":"ssid-wpa2","PASSWD":"ssidpw-wpa2","SECURITY":"wpa2"},
    "RADIO_1_CFG":{"KEY":"RADIO_1_CFG","RADIO":"wiphy1","STATIONS":"4","SSID":"ssid-wpa2-2","PASSWD":"ssidpw-wpa2-2","SECURITY":"wpa2"},
    "RADIO_2_CFG":{"KEY":"RADIO_2_CFG","RADIO":"wiphy1","STATIONS":"4","SSID":"ssid-wpa","PASSWD":"ssidpw-wpa","SECURITY":"wpa"},
    "RADIO_3_CFG":{"KEY":"RADIO_3_CFG","RADIO":"wiphy1","STATIONS":"4","SSID":"ssid-wep","PASSWD":"ssidpw-wep","SECURITY":"wep"},
    "RADIO_4_CFG":{"KEY":"RADIO_4_CFG","RADIO":"wiphy1","STATIONS":"4","SSID":"ssid-wpa3","PASSWD":"ssidpw-wpa3","SECURITY":"wpa3"}
    }


[TEST_NETWORK]
HTTP_TEST_IP = "10.40.0.1"
FTP_TEST_IP = "10.40.0.1"
TEST_IP = "10.40.0.1"

[TEST_GENERIC]
RADIO_USED = "wiphy1"
SSID_USED = "ssid-wpa2"
SSID_PW_USED = "ssidpw-wpa2"
SECURITY_USED = "wpa2"
NUM_STA = "3"
COL_NAMES = "name,tx_bytes,rx_bytes,dropped"
UPSTREAM_PORT = "eth1"

# NO quotes around test parameters
[TEST_PARAMETERS]
TEST_TIMEOUT = 120
LOAD_BLANK_DB = FALSE
LOAD_FACTORY_DEFAULT_DB = FALSE
LOAD_CUSTOM_DB = FALSE
CUSTOM_DB = CUSTOM_DB_NAME_HERE

# Not used
[LF_MGR]
LF_MGR_IP= localhost
LF_MGR_PORT=8080

# REPORTS are in /home/lanforge/html-reports
# if /home/lanforge/html-reports not present then reports stored in local directory
#[REPORTS]
#REPORT_DIR="/home/lanforge/html-reports"


# TEST_DICTIONARY used by lf_check, Other section names will be ignored so can save other test lists
# USE TEST_DICTIONARY_NOT_RUN to ignore tests
[TEST_DICTIONARY]
TEST_DICT: {
    "create_l3":{"enabled":"TRUE","command":"create_l3.py","args":"RADIO_1_CFG --debug"},
    "create_l4":{"enabled":"TRUE","command":"create_l4.py","args":"RADIO_1_CFG --debug"}
    }

# This is an EXAMPLE dictionary of tests that can be run,  copy to TEST_DICTIONARY to test.  
# Feature update pass in the DICTIONARY name to be run
[TEST_DICTIONARY_EXAMPLE]
TEST_DICT: {
    "example_security_connection0":{"enabled":"FALSE","command":"example_security_connection.py","args":"RADIO_1_CFG --debug"},
    "example_security_connection1":{"enabled":"FALSE","command":"example_security_connection.py","args":"RADIO_2_CFG --debug"},
    "example_security_connection2":{"enabled":"FALSE","command":"example_security_connection.py","args":"RADIO_3_CFG --debug"},
    "example_security_connection3":{"enabled":"FALSE","command":"example_security_connection.py","args":"RADIO_4_CFG --debug"},
    "sta_connect2":{"enabled":"FALSE","command":"sta_connect2.py","args":"--dut_ssid ssid-wpa2 --dut_passwd ssidpw-wpa2 --dut_security wpa2"},
    "sta_connect_example":{"enabled":"FALSE","command":"sta_connect_example.py"},
    "test_generic0":{"enabled":"FALSE","command":"test_generic.py","args":"RADIO_1_CFG --type lfping --dest TEST_IP --debug"},
    "test_generic1":{"enabled":"FALSE","command":"test_generic.py","args":"RADIO_1_CFG --type speedtest --speedtest_min_up 20 --speedtest_min_dl 20 --speedtest_max_ping 150 --debug"},
    "test_generic2":{"enabled":"FALSE","command":"test_generic.py","args":"RADIO_1_CFG --type lfping --dest TEST_IP --debug"},
    "test_generic3":{"enabled":"FALSE","command":"test_generic.py","args":"RADIO_1_CFG --type lfping --dest TEST_IP --debug"},
    "testgroup":{"enabled":"FALSE","command":"testgroup.py","args":"--group_name group1 --add_group --list_groups --debug"},
    "test_ipv4_connection":{"enabled":"FALSE","command":"test_ipv4_connection.py","args":"RADIO_1_CFG --debug"},
    "test_ipv4_l4_urls_per_ten":{"enabled":"FALSE","command":"test_ipv4_l4_urls_per_ten.py","args":"RADIO_1_CFG --num_tests 1 --requests_per_ten 600 --target_per_ten 600 --debug"},
    "test_ipv4_l4_wifi":{"enabled":"FALSE","command":"test_ipv4_l4_wifi.py","args":"RADIO_1_CFG --test_duration 15s --debug"},
    "test_ipv4_l4":{"enabled":"FALSE","command":"test_ipv4_l4.py","args":"RADIO_1_CFG --test_duration 15s --debug"},
    "test_ipv4_variable_time0":{"enabled":"FALSE","command":"test_ipv4_variable_time.py","args":"RADIO_1_CFG --test_duration 15s --output_format excel --layer3_cols COL_NAMES --traffic_type lf_udp --debug"},
    "test_ipv4_variable_time1":{"enabled":"FALSE","command":"test_ipv4_variable_time.py","args":"RADIO_1_CFG --test_duration 15s --output_format csv --layer3_cols COL_NAMES --traffic_type lf_udp --debug"},
    "create_bridge":{"enabled":"FALSE","command":"create_bridge.py","args":"--radio RADIO_USED --upstream_port UPSTREAM_PORT --target_device sta0000 --debug"},
    "create_l3":{"enabled":"FALSE","command":"create_l3.py","args":"RADIO_1_CFG --debug"},
    "create_l4":{"enabled":"FALSE","command":"create_l4.py","args":"RADIO_1_CFG --debug"},
    "create_macvlan":{"enabled":"FALSE","command":"create_macvlan.py","args":"--radio RADIO_USED --macvlan_parent UPSTREAM_PORT --debug"},
    "create_station":{"enabled":"FALSE","command":"create_station.py","args":"--radio RADIO_USED --ssid SSID_USED --passwd SSID_PW_USED --security SECURITY_USED --debug"},
    "create_vap":{"enabled":"FALSE","command":"create_vap.py","args":" --radio RADIO_USED --ssid SSID_USED --passwd SSID_PW_USED --security SECURITY_USED --debug"},
    "test_fileio":{"enabled":"FALSE","command":"test_fileio.py","args":"--macvlan_parent eth2 --num_ports 3 --use_macvlans --first_mvlan_ip 192.168.92.13 --netmask 255.255.255.0 --gateway 192.168.92.1 --test_duration 30s"},
    "test_ipv6_connection":{"enabled":"FALSE","command":"test_ipv6_connection.py","args":"RADIO_1_CFG --debug"},
    "test_ipv6_variable_time":{"enabled":"FALSE","command":"test_ipv6_variable_time.py","args":"RADIO_1_CFG --test_duration 15s --cx_type tcp6 --debug"},
    "test_l3_longevity":{"enabled":"FALSE","command":"test_l3_longevity.py","args":"--test_duration 20s --polling_interval 5s --upstream_port eth1 
        --radio 'radio==wiphy0,stations==1,ssid==ssid-wpa2,ssid_pw==ssidpw-wpa2,security==wpa2' 
        --radio 'radio==wiphy1,stations==1,ssid==ssid-wpa2-2,ssid_pw==ssidpw-wpa2-2,security==wpa2' 
        --endp_type lf_udp --ap_read --ap_test_mode --rates_are_totals --side_a_min_bps=20000 --side_b_min_bps=300000000"},
    "test_l3_powersave_traffic":{"enabled":"FALSE","command":"test_l3_powersave_traffic.py","args":"RADIO_1_CFG"},
    "test_l3_scenario_throughput":{"enabled":"FALSE","command":"test_l3_scenario_throughput.py","args":"RADIO_1_CFG --debug"},
    "test_status_msg":{"enabled":"FALSE","command":"test_status_msg.py","args":"--action run_test"},
    "test_wanlink":{"enabled":"FALSE","command":"test_wanlink.py","args":"--debug"},
    "sta_connect_example":{"enabled":"FALSE","command":"sta_connect_example.py","args":"RADIO_1_CFG --upstream_port UPSTREAM_PORT"},
    "create_vr.py":{"enabled":"FALSE","command":"create_vr.py","args":"--vr_name 2.vr0 --ports 2.br0,2.vap2 --services"},
    "wlan_capacity_calculator1":{"enabled":"FALSE","command":"./wlan_capacity_calculator.py","args":"-sta 11abg -t Voice -p 48 -m 106 -e WEP -q Yes -b 1 2 5.5 11 -pre Long -s N/A -co G.711 -r Yes -c Yes"},
    "wlan_capacity_calculator2":{"enabled":"FALSE","command":"./wlan_capacity_calculator.py","args":"-sta 11n -t Voice -d 17 -ch 40 -gu 800 -high 9 -e WEP -q Yes -ip 5 -mc 42 -b 6 9 12 24 -m 1538 -co G.729 -pl Greenfield -cw 15 -r Yes -c Yes"},
    "wlan_capacity_calculator3":{"enabled":"FALSE","command":"./wlan_capacity_calculator.py","args":"-sta 11ac -t Voice -d 9 -spa 3 -ch 20 -gu 800 -high 1 -e TKIP -q Yes -ip 3 -mc 0 -b 6 12 24 54 -m 1518 -co Greenfield -cw 15 -rc Yes"}
    }


