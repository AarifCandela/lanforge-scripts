#!/usr/bin/env python3

"""
NAME: lf_rf_test.py

PURPOSE:
RF Characteristics Test

SETUP:
There need to be a vAP in a Virtual Router  on LANforge , goal is to eventually have autogenerated

EXAMPLE:


COPYRIGHT:
    Copyright 2023 Candela Technologies Inc
    License: Free to distribute and modify. LANforge systems must be licensed.

INCLUDE_IN_README
"""
import argparse
import sys
import os
import logging
import importlib
import pandas
import requests
from pandas import json_normalize
import json
import traceback
import csv
import time

sys.path.append(os.path.join(os.path.abspath(__file__ + "../../../")))
lanforge_api = importlib.import_module("lanforge_client.lanforge_api")

from lanforge_client.lanforge_api import LFJsonQuery
from lanforge_client.lanforge_api import LFJsonCommand
from lanforge_client.lanforge_api import LFSession
LFUtils = importlib.import_module("py-json.LANforge.LFUtils")


lf_json_api = importlib.import_module("py-scripts.lf_json_api")
lf_report = importlib.import_module("py-scripts.lf_report")
lf_kpi_csv = importlib.import_module("py-scripts.lf_kpi_csv")
lf_logger_config = importlib.import_module("py-scripts.lf_logger_config")

# realm = importlib.import_module("py-json.realm")
# Realm = realm.Realm





logger = logging.getLogger(__name__)


if sys.version_info[0] != 3:
    print("This script requires Python 3")
    exit(1)


# RF Characteristics Test
class lf_rf_char():
    def __init__(self,
                 lf_mgr=None,
                 lf_port=None,
                 lf_user=None,
                 lf_passwd=None,
                 debug=False
                 ):
        self.lf_mgr = lf_mgr
        self.lf_port = lf_port
        self.lf_user = lf_user
        self.lf_passwd = lf_passwd
        self.debug = debug
        self.vap_port = ''
        self.radio = ''
        self.vap = ''
        self.port = ''
        self.shelf = ''
        self.resource = ''
        self.duration = ''
        self.polling_interval = ''
        # create api_json
        self.json_api = lf_json_api.lf_json_api(lf_mgr=self.lf_mgr,
                                                lf_port=self.lf_port,
                                                lf_user=self.lf_user,
                                                lf_passwd=self.lf_passwd)

        # create a session
        #self.session = LFSession(lfclient_url="http://{lf_mgr}:{lf_port}".format(lf_mgr=self.lf_mgr, lf_port=self.lf_port),
        self.session = LFSession(lfclient_url="http://%s:8080" % self.lf_mgr,
                                 debug=debug,
                                 connection_timeout_sec=4.0,
                                 stream_errors=True,
                                 stream_warnings=True,
                                 require_session=True,
                                 exit_on_error=True)
        # type hinting
        self.command: LFJsonCommand
        self.command = self.session.get_command()
        self.query: LFJsonQuery
        self.query = self.session.get_query()

        # vap configuration
        self.shelf = ''
        self.resource = ''
        self.port_name = ''
        self.vap_radio = ''
        self.vap_channel = ''
        self.vap_antenna = ''

        # logging
        self.debug = debug


    def clear_port_counters(self):
        self.shelf, self.resource, self.port_name, *nil = LFUtils.name_to_eid(self.vap_port)
        # may have to add extra to
        self.command.post_clear_port_counters(shelf=self.shelf,
                                              resource=self.resource,
                                              port=self.port_name,
                                              extra=None)

        

    def modify_radio(self):

        self.shelf, self.resource, self.port_name, *nil = LFUtils.name_to_eid(self.vap_radio)
        self.command.post_set_wifi_radio(
            shelf=self.shelf,
            resource=self.resource,
            radio=self.port_name, 
            antenna=self.vap_antenna,
            channel=self.vap_channel,
            debug=self.debug)

    def read_wifi_stats(self):
        pass

    def read_stations(self):
        pass


def main():
    # arguments
    parser = argparse.ArgumentParser(
        prog='lf_rf_char.py',
        formatter_class=argparse.RawTextHelpFormatter,
        epilog='''\
            lf_rf_char.py : RF Characteristics test
            ''',
        description='''\
lf_rf_char.py
-----------

Summary :
---------

Example :
---------
            ''')
    # LANforge configuration
    parser.add_argument("--lf_mgr", type=str, help="address of the LANforge GUI machine (localhost is default)", default='localhost')
    parser.add_argument("--lf_port", help="IP Port the LANforge GUI is listening on (8080 is default)", default=8080)
    parser.add_argument("--lf_user", type=str, help="user: lanforge", default='lanforge')
    parser.add_argument("--lf_passwd", type=str, help="passwd: lanforge", default='lanforge')
    parser.add_argument("--vap_port", type=str, help=" port : 1.1.vap3  provide full eid  (endpoint id")
    parser.add_argument("--vap_radio", type=str, help=" --vap_radio wiphy0")
    parser.add_argument("--vap_channel", type=str, help=" --vap_channel '36'  channel of the radio e.g. 6 (2.4G) , 36 (5G), ")
    parser.add_argument("--vap_antenna", help='number of spatial streams: 0 Diversity (All), 1 Fixed-A (1x1), 4 AB (2x2), 7 ABC (3x3), 8 ABCD (4x4), 9 (8x8)')

    # Reporting Configuration
    parser.add_argument('--local_lf_report_dir', help='--local_lf_report_dir override the report path, primary use when running test in test suite', default="")
    parser.add_argument("--test_rig", default="lanforge",
                        help="test rig for kpi.csv, testbed that the tests are run on")
    parser.add_argument("--test_tag", default="kpi_generation",
                        help="test tag for kpi.csv,  test specific information to differenciate the test")
    parser.add_argument("--dut_hw_version", default="hw_01",
                        help="dut hw version for kpi.csv, hardware version of the device under test")
    parser.add_argument("--dut_sw_version", default="sw_01",
                        help="dut sw version for kpi.csv, software version of the device under test")
    parser.add_argument("--dut_model_num", default="can_ap",
                        help="dut model for kpi.csv,  model number / name of the device under test")
    parser.add_argument("--dut_serial_num", default="can_123",
                        help="dut serial num for kpi.csv,  model serial number ")

    parser.add_argument("--test_priority", default="95",
                        help="dut model for kpi.csv,  test-priority is arbitrary number")
    parser.add_argument("--test_id", default="kpi_unit_test", help="test-id for kpi.csv,  script or test name")
    parser.add_argument("--csv_outfile", default="lf_rf_char", help=" csv outfile")


    # Logging Configuration
    parser.add_argument('--log_level', default=None, help='Set logging level: debug | info | warning | error | critical')
    parser.add_argument("--lf_logger_config_json", help="--lf_logger_config_json <json file> , json configuration of logger")
    parser.add_argument('--debug', help='Legacy debug flag', action='store_true')

    # Test Configuration
    parser.add_argument('--duration', help="--duration <seconds>", default='20s')
    parser.add_argument('--polling_interval', help="--polling_interval <seconds>", default='1s')

    args = parser.parse_args()

    # set up logger
    logger_config = lf_logger_config.lf_logger_config()

    # set the logger level to debug
    if args.log_level:
        logger_config.set_level(level=args.log_level)

    # lf_logger_config_json will take presidence to changing debug levels
    if args.lf_logger_config_json:
        # logger_config.lf_logger_config_json = "lf_logger_config.json"
        logger_config.lf_logger_config_json = args.lf_logger_config_json
        logger_config.load_lf_logger_config()

    # Gather data for test reporting
    # for kpi.csv generation
    logger.info("read in command line paramaters")
    local_lf_report_dir = args.local_lf_report_dir
    test_rig = args.test_rig
    test_tag = args.test_tag
    dut_hw_version = args.dut_hw_version
    dut_sw_version = args.dut_sw_version
    dut_model_num = args.dut_model_num
    dut_serial_num = args.dut_serial_num
    # test_priority = args.test_priority  # this may need to be set per test
    test_id = args.test_id

    # Create report, when running with the test framework (lf_check.py)
    # results need to be in the same directory
    logger.info("configure reporting")
    if local_lf_report_dir != "":
        report = lf_report.lf_report(
            _path=local_lf_report_dir,
            _results_dir_name="rf_char",
            _output_html="rf_char.html",
            _output_pdf="rf_char.pdf")
    else:
        report = lf_report.lf_report(
            _results_dir_name="test_l3",
            _output_html="rf_char.html",
            _output_pdf="rf_char.pdf")

    kpi_path = report.get_report_path()
    logger.info("Report and kpi_path :{kpi_path}".format(kpi_path=kpi_path))

    kpi_csv = lf_kpi_csv.lf_kpi_csv(
        _kpi_path=kpi_path,
        _kpi_test_rig=test_rig,
        _kpi_test_tag=test_tag,
        _kpi_dut_hw_version=dut_hw_version,
        _kpi_dut_sw_version=dut_sw_version,
        _kpi_dut_model_num=dut_model_num,
        _kpi_dut_serial_num=dut_serial_num,
        _kpi_test_id=test_id)

    if args.csv_outfile is not None:
        current_time = time.strftime("%Y-%m-%d-%H-%M-%S", time.localtime())
        csv_outfile = "{}_{}_lf_rf_char.csv".format(
            args.csv_outfile, current_time)
        csv_outfile = report.file_add_path(csv_outfile)
        logger.info("csv output file : {}".format(csv_outfile))

    # test
    # session = LFSession(lfclient_url="http://%s:8080" % args.lf_mgr,
    #                     debug=args.debug,
    #                     connection_timeout_sec=2.0,
    #                     stream_errors=True,
    #                     stream_warnings=True,
    #                     require_session=True,
    #                     exit_on_error=True)
    # # type hinting
    # command: LFJsonCommand
    # command = session.get_command()
    # query: LFJsonQuery
    # query = session.get_query()



    # Set up the RF Characteristic test
    logger.info("Configure RF Characteristic test")
    rf_char = lf_rf_char(lf_mgr=args.lf_mgr,
                            lf_port=args.lf_port,
                            lf_user=args.lf_user,
                            lf_passwd=args.lf_passwd,
                            debug=args.debug)

    if not args.vap_radio:
        logger.info("No radio name provided")
        exit(1)

    # need to start traffic
    # TODO this needs to be a list to sweep though channels
    rf_char.vap_radio = args.vap_radio
    rf_char.vap_channel = args.vap_channel
    rf_char.vap_antenna = args.vap_antenna
    rf_char.modify_radio()
    # TODO detect that the station is back up
    rf_char.vap_port = args.vap_port
    rf_char.clear_port_counters()

    report.set_title("RF Characteristics Test")
    report.build_banner_left()
    report.start_content_div2()
    report.set_obj_html("Objective", "RF Characteristics Test: Report maximum supported nss and show amount of retransmits")
    report.build_objective()

    test_setup_info = {
        "DUT Name": args.dut_model_num,
        "DUT Hardware Version": args.dut_hw_version,
        "DUT Software Version": args.dut_sw_version,
        "DUT Serial Number": args.dut_serial_num,
    }

    report.set_table_title("Device Under Test Information")
    report.build_table_title()
    report.test_setup_table(value="Device Under Test", test_setup_data=test_setup_info)

    test_input_info = {
        "LANforge ip": args.lf_mgr,
        "LANforge port": args.lf_port,
        "Upstream": args.upstream_port,
        "Test Duration": args.test_duration,
        "Polling Interval": args.polling_interval,
    }

    report.set_table_title("Test Configuration")
    report.build_table_title()
    report.test_setup_table(value="Test Configuration", test_setup_data=test_input_info)


if __name__ == "__main__":
    main()
